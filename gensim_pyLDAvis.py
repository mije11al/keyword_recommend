# -*- coding: latin-1 -*-
"""
@Michael Jensen

updated 22-09-2017

This script uses input generated by tfidf_generator.py and data_preprocessing.py
to create a pyldavis visualization.

"""




import pickle
import gensim
from gensim import corpora
import pandas as pd
import pyLDAvis
from scipy import sparse
from sklearn.preprocessing import normalize



def pickle_loader(var):
    '''
    :param var: any given variable
    :return: item: pickled variable, in folder called data_for_visualization
    '''
    with open('data_for_visualization/' + var + '.pickle', 'rb') as handle:
        item = pickle.load(handle)
        return item


def create_dense_tfidf(corpus, tfidf):
    '''
    :param corpus: gensim corpus
    :param tfidf: gensim tfidf
    :return: dense version of tfidf model
    '''
    als = []
    freqlist = pickle_loader('freqlist')
    corpus_tfidf = tfidf[corpus]
    for doc in corpus_tfidf:
        als.append(doc)
    n_doc = len(als)
    n_terms = len(freqlist)
    data, col, row = [], [], []
    for i, rr in enumerate(als):
        for cc in rr:
            row.append(i)
            col.append(cc[0])
            data.append(cc[1])


    M = sparse.coo_matrix((data,
                           (row,col)),
                          shape=(n_doc, n_terms))
    M_normalized = normalize(M,
                             norm='l1',
                             axis=1)
    dense_tfidf = M_normalized.todense()
    return dense_tfidf


def create_data(dense_tfidf):
    '''
    :param dense_tfidf: dense version of gensim tfidf
    :return:
    '''
    doc_lengths = pickle_loader('len_doc')
    freqlist = pickle_loader('freqlist')
    df = pd.read_excel('data_for_visualization/doc_topic_dists.xlsx')
    doc_topic_dists = df.as_matrix()
    load_vocab = pickle_loader('vocab')
    vocab = [i[1] for i in load_vocab]
    data = pyLDAvis.prepare(
                            dense_tfidf,
                            doc_topic_dists,
                            doc_lengths,
                            vocab,
                            freqlist,
                            sort_topics=False)
    return data

def runner(path):
    '''
    :param path: working directory
    :return: an .html file with a pyLDAvis visualization of topics in data_for_visualization folder
    '''
    corpus = corpora.MmCorpus('model/test.mm')
    tfidf = gensim.models.TfidfModel.load(('model/tfidf.model'))
    dense_tfidf = create_dense_tfidf(corpus, tfidf)
    data = create_data(dense_tfidf)
    pyLDAvis.save_html(data, 'model_visual.html')
    print "Pyldavis has been generated and saved to HTML file"

